//Student_Management_System_DDS_PROJECT
#include <stdio.h>
#include <string.h>

#define MAX 100

// Structure Definition
struct Student {
    int rollNo;
    char name[50];
    float marks;
};

// Global variables
struct Student students[MAX];
int n = 0; // current number of students

// Function Declarations
void insertStudent();
void deleteStudent();
void updateStudent();
void displayStudents();
void searchMenu();
void sortMenu();
void filterStudents();

// Searching Algorithms
int linearSearch(int roll);
int binarySearch(int roll);
int interpolationSearch(int roll);

// Sorting Algorithms
void bubbleSort();
void selectionSort();
void insertionSort();
void quickSort(int low, int high);
int partition(int low, int high);
void mergeSort(int low, int high);
void merge(int low, int mid, int high);

// Utility
void swap(struct Student *a, struct Student *b);

int main() {
    int choice;
    do {
        printf("\n Student Record Manager\n");
        printf("1. Insert Student\n");
        printf("2. Delete Student\n");
        printf("3. Update Student\n");
        printf("4. Display All Students\n");
        printf("5. Search Student\n");
        printf("6. Sort Students\n");
        printf("7. Filter by Marks\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // clear input buffer

        switch (choice) {
            case 1: insertStudent(); break;
            case 2: deleteStudent(); break;
            case 3: updateStudent(); break;
            case 4: displayStudents(); break;
            case 5: searchMenu(); break;
            case 6: sortMenu(); break;
            case 7: filterStudents(); break;
            case 8: printf("Exiting program...\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while (choice != 8);

    return 0;
}

// =============================
// Function Implementations
// =============================

// Insert a new student
void insertStudent() {
    if (n >= MAX) {
        printf("Record limit reached!\n");
        return;
    }
    struct Student s;
    printf("Enter Roll No: ");
    scanf("%d", &s.rollNo);
    getchar();
    printf("Enter Name: ");
    fgets(s.name, 50, stdin);
    s.name[strcspn(s.name, "\n")] = '\0';
    printf("Enter Marks: ");
    scanf("%f", &s.marks);
    students[n++] = s;
    printf(" Student Added Successfully!\n");
}

// Delete a student by roll number
void deleteStudent() {
    int roll, found = 0;
    printf("Enter Roll No to Delete: ");
    scanf("%d", &roll);
    for (int i = 0; i < n; i++) {
        if (students[i].rollNo == roll) {
            for (int j = i; j < n - 1; j++)
                students[j] = students[j + 1];
            n--;
            found = 1;
            printf("🗑️ Record Deleted Successfully!\n");
            break;
        }
    }
    if (!found)
        printf("❌ Record Not Found!\n");
}

// Update student details
void updateStudent() {
    int roll;
    printf("Enter Roll No to Update: ");
    scanf("%d", &roll);
    for (int i = 0; i < n; i++) {
        if (students[i].rollNo == roll) {
            printf("Enter New Name: ");
            getchar();
            fgets(students[i].name, 50, stdin);
            students[i].name[strcspn(students[i].name, "\n")] = '\0';
            printf("Enter New Marks: ");
            scanf("%f", &students[i].marks);
            printf(" Record Updated Successfully!\n");
            return;
        }
    }
    printf(" Record Not Found!\n");
}

// Display all students
void displayStudents() {
    if (n == 0) {
        printf("No Records Available!\n");
        return;
    }
    printf("\nRoll No\tName\t\tMarks\n");
    printf("---------------------------------\n");
    for (int i = 0; i < n; i++)
        printf("%d\t%-15s%.2f\n", students[i].rollNo, students[i].name, students[i].marks);
}

// =============================
// Searching Section
// =============================
void searchMenu() {
    int choice, roll, index;
    printf("\nSearch Methods:\n1. Linear Search\n2. Binary Search\n3. Interpolation Search\n");
    printf("Enter choice: ");
    scanf("%d", &choice);
    printf("Enter Roll No to Search: ");
    scanf("%d", &roll);

    switch (choice) {
        case 1:
            index = linearSearch(roll);
            break;
        case 2:
            bubbleSort(); // ensure sorted for binary search
            index = binarySearch(roll);
            break;
        case 3:
            bubbleSort();
            index = interpolationSearch(roll);
            break;
        default:
            printf("Invalid choice!\n");
            return;
    }

    if (index != -1)
        printf(" Found: %d\t%s\t%.2f\n", students[index].rollNo, students[index].name, students[index].marks);
    else
        printf("Student not found!\n");
}

int linearSearch(int roll) {
    for (int i = 0; i < n; i++)
        if (students[i].rollNo == roll)
            return i;
    return -1;
}

int binarySearch(int roll) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (students[mid].rollNo == roll)
            return mid;
        else if (students[mid].rollNo < roll)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

int interpolationSearch(int roll) {
    int low = 0, high = n - 1;
    while (low <= high && roll >= students[low].rollNo && roll <= students[high].rollNo) {
        if (low == high) {
            if (students[low].rollNo == roll)
                return low;
            return -1;
        }
        int pos = low + ((roll - students[low].rollNo) * (high - low)) /
                         (students[high].rollNo - students[low].rollNo);
        if (students[pos].rollNo == roll)
            return pos;
        if (students[pos].rollNo < roll)
            low = pos + 1;
        else
            high = pos - 1;
    }
    return -1;
}

// =============================
// Sorting Section
// =============================
void sortMenu() {
    int choice;
    printf("\nSorting Methods:\n1. Bubble Sort\n2. Selection Sort\n3. Insertion Sort\n4. Quick Sort\n5. Merge Sort\n");
    printf("Enter choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1: bubbleSort(); break;
        case 2: selectionSort(); break;
        case 3: insertionSort(); break;
        case 4: quickSort(0, n - 1); break;
        case 5: mergeSort(0, n - 1); break;
        default: printf("Invalid choice!\n"); return;
    }

    printf("Students Sorted Successfully!\n");
    displayStudents();
}

void bubbleSort() {
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (students[j].rollNo > students[j + 1].rollNo)
                swap(&students[j], &students[j + 1]);
}

void selectionSort() {
    for (int i = 0; i < n - 1; i++) {
        int min = i;
        for (int j = i + 1; j < n; j++)
            if (students[j].rollNo < students[min].rollNo)
                min = j;
        swap(&students[i], &students[min]);
    }
}

void insertionSort() {
    for (int i = 1; i < n; i++) {
        struct Student key = students[i];
        int j = i - 1;
        while (j >= 0 && students[j].rollNo > key.rollNo) {
            students[j + 1] = students[j];
            j--;
        }
        students[j + 1] = key;
    }
}

// Quick Sort
int partition(int low, int high) {
    int pivot = students[high].rollNo;
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (students[j].rollNo < pivot) {
            i++;
            swap(&students[i], &students[j]);
        }
    }
    swap(&students[i + 1], &students[high]);
    return i + 1;
}

void quickSort(int low, int high) {
    if (low < high) {
        int pi = partition(low, high);
        quickSort(low, pi - 1);
        quickSort(pi + 1, high);
    }
}

// Merge Sort
void merge(int low, int mid, int high) {
    struct Student temp[MAX];
    int i = low, j = mid + 1, k = 0;
    while (i <= mid && j <= high) {
        if (students[i].rollNo <= students[j].rollNo)
            temp[k++] = students[i++];
        else
            temp[k++] = students[j++];
    }
    while (i <= mid)
        temp[k++] = students[i++];
    while (j <= high)
        temp[k++] = students[j++];
    for (i = low, j = 0; i <= high; i++, j++)
        students[i] = temp[j];
}

void mergeSort(int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
        mergeSort(low, mid);
        mergeSort(mid + 1, high);
        merge(low, mid, high);
    }
}

// =============================
// Filter Section
// =============================
void filterStudents() {
    float minMarks;
    printf("Enter Minimum Marks: ");
    scanf("%f", &minMarks);
    printf("\nStudents scoring above %.2f:\n", minMarks);
    printf("---------------------------------\n");
    for (int i = 0; i < n; i++) {
        if (students[i].marks >= minMarks)
            printf("%d\t%-15s%.2f\n", students[i].rollNo, students[i].name, students[i].marks);
    }
}

// Utility: Swap Function
void swap(struct Student *a, struct Student *b) {
    struct Student temp = *a;
    *a = *b;
    *b = temp;
}
